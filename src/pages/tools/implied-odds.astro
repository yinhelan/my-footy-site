---
import BaseLayout from '../../layouts/BaseLayout.astro';
import HistoryPicker from '../../components/HistoryPicker.astro';

const meta = {
  title: 'Implied → Fair Odds',
  description: 'Convert market odds to implied probabilities, remove overround to get fair odds.',
  lang: 'en'
};
---
<BaseLayout {...meta}>
  <h1 style="margin:.2rem 0">Implied → Fair Odds</h1>
  <div class="page-actions" style="display:flex;gap:8px;margin:12px 0">
    <button type="button" class="btn" id="btn-fill-example" data-testid="fill-example">填充示例</button>
  </div>

  <form id="tool-form" style="display:grid;gap:10px;max-width:680px">
    <style>
      .field-error{display:block;color:#d32f2f;font-size:.75rem;margin-top:4px;}
      .btn[disabled]{opacity:.6;cursor:not-allowed;}
    </style>
    <div style="display:flex;gap:10px;flex-wrap:wrap;align-items:center">
      <label style="display:flex;flex-direction:column;gap:4px">Market
        <select name="kind">
          <option value="3way">1X2 (3-way)</option>
          <option value="2way">Two-way</option>
        </select>
        <small class="field-error" data-error-for="kind"></small>
      </label>
      <label style="display:flex;flex-direction:column;gap:4px">Target Overround
        <input name="target" type="number" step="0.01" placeholder="1.00" title="默认 1.00（100%），也可设定 1.03 表示 3% 抽水目标">
        <small class="field-error" data-error-for="target"></small>
      </label>
    </div>

    <div id="row-3way" style="display:flex;gap:10px;flex-wrap:wrap">
      <label style="display:flex;flex-direction:column;gap:4px">Home (H)
        <input name="H" type="number" step="0.01" placeholder="1.95">
        <small class="field-error" data-error-for="H"></small>
      </label>
      <label style="display:flex;flex-direction:column;gap:4px">Draw (D)
        <input name="D" type="number" step="0.01" placeholder="3.70">
        <small class="field-error" data-error-for="D"></small>
      </label>
      <label style="display:flex;flex-direction:column;gap:4px">Away (A)
        <input name="A" type="number" step="0.01" placeholder="3.80">
        <small class="field-error" data-error-for="A"></small>
      </label>
    </div>

    <div id="row-2way" style="display:none;gap:10px;flex-wrap:wrap">
      <label style="display:flex;flex-direction:column;gap:4px">Side A
        <input name="A2" type="number" step="0.01" placeholder="1.90">
        <small class="field-error" data-error-for="A2"></small>
      </label>
      <label style="display:flex;flex-direction:column;gap:4px">Side B
        <input name="B2" type="number" step="0.01" placeholder="1.90">
        <small class="field-error" data-error-for="B2"></small>
      </label>
    </div>

    <div style="display:flex;gap:8px;flex-wrap:wrap">
      <button type="button" id="btn-calc" class="btn">Calculate</button>
      <button type="button" id="btn-share"   class="btn">Share link</button>
      <button type="button" id="btn-history" class="btn">历史数据</button>
      <button type="reset"  class="btn">Reset</button>
    </div>
  </form>

  <div id="out" class="card" style="margin-top:12px"></div>

  <script type="module">
    import { makeShareUrl, readParams, normalizeDecimal } from '../../lib/share.ts';
    import { required, isNumber, inRange, compose } from '../../lib/validate.ts';

    const form = document.querySelector('#tool-form');
    const out  = document.querySelector('#out');
    const row3 = document.querySelector('#row-3way');
    const row2 = document.querySelector('#row-2way');
    const shareBtn = document.getElementById('btn-share');
    const calcBtn = document.getElementById('btn-calc');
    const fillBtn = document.getElementById('btn-fill-example');

    const emit = (event, detail = {}) => {
      window.dispatchEvent(new CustomEvent('analytics', { detail: { event, tool: 'implied-odds', ...detail } }));
    };

    const validators = {
      target: compose(required('请输入目标 Overround'), isNumber(), inRange(0.8, 2, '范围 0.8~2')),
      H: compose(required('请输入主胜赔率'), isNumber(), inRange(1.01, 50, '范围 1.01~50')),
      D: compose(required('请输入平赔率'), isNumber(), inRange(1.01, 50, '范围 1.01~50')),
      A: compose(required('请输入客胜赔率'), isNumber(), inRange(1.01, 50, '范围 1.01~50')),
      A2: compose(required('请输入 A 赔率'), isNumber(), inRange(1.01, 50, '范围 1.01~50')),
      B2: compose(required('请输入 B 赔率'), isNumber(), inRange(1.01, 50, '范围 1.01~50')),
    };
    const touched = new Set();

    const q = (sel) => form?.querySelector(sel);
    const errorEl = (name) => form?.querySelector(`[data-error-for="${name}"]`);
    const getValue = (name) => (q(`[name="${name}"]`)?.value ?? '').trim();
    const activeFields = () => (q('[name="kind"]').value === '3way' ? ['target', 'H', 'D', 'A'] : ['target', 'A2', 'B2']);

    const setError = (name, result, force) => {
      const el = errorEl(name);
      if (el) el.textContent = !result.ok && (force || touched.has(name)) ? (result.msg ?? '') : '';
    };

    const validate = (force = false) => {
      const active = activeFields();
      if (force) active.forEach((name) => touched.add(name));
      const allOk = active.every((name) => {
        const validator = validators[name];
        const result = validator ? validator(getValue(name)) : { ok: true };
        setError(name, result, force);
        return result.ok;
      });
      ['H', 'D', 'A', 'A2', 'B2'].filter((name) => !active.includes(name)).forEach((name) => setError(name, { ok: true }, true));
      if (calcBtn instanceof HTMLButtonElement) calcBtn.disabled = !allOk;
      if (shareBtn instanceof HTMLButtonElement) shareBtn.disabled = !allOk;
      return allOk;
    };

    const num = (el) => {
      const normalized = normalizeDecimal(el && el.value || '');
      const n = Number(normalized);
      return Number.isFinite(n) ? n : NaN;
    };
    const formatPct = (x) => (x*100).toFixed(1) + '%';
    const td = (s) => '<td style="padding:6px 8px;border-bottom:1px solid #eee;white-space:nowrap">'+s+'</td>';

    const renderTable = (rows, caption) => `
      <div style="overflow:auto">
        <table style="border-collapse:collapse;min-width:520px">
          ${caption ? `<caption style="text-align:left;margin:.3rem 0 .5rem 0;color:#64748B">${caption}</caption>` : ''}
          <thead><tr>
            ${['项','H/A','D/B','A'].map(h=>'<th style="text-align:left;padding:6px 8px;color:#64748B;font-weight:600">'+h+'</th>').join('')}
          </tr></thead>
          <tbody>
            ${rows.map(r=>`<tr>${r.map(td).join('')}</tr>`).join('')}
          </tbody>
        </table>
      </div>`;

    const syncMode = () => {
      const kind = q('[name="kind"]').value;
      if (row3 && row2) {
        row3.style.display = (kind === '3way') ? 'flex' : 'none';
        row2.style.display = (kind === '2way') ? 'flex' : 'none';
      }
    };

    const calc = () => {
      if (!validate(false)) {
        if (out) out.textContent = '请检查输入';
        return;
      }

      syncMode();
      const kind = q('[name="kind"]').value;
      const target = Number(normalizeDecimal(getValue('target') || '1.00'));

      if (kind === '3way') {
        const H = num(q('[name="H"]'));
        const D = num(q('[name="D"]'));
        const A = num(q('[name="A"]'));
        const pH = 1/H, pD = 1/D, pA = 1/A;
        const over = pH + pD + pA;
        const f = target / over;
        const nh = pH * f, nd = pD * f, na = pA * f;
        const fairH = 1/nh, fairD = 1/nd, fairA = 1/na;
        if (out) {
          out.innerHTML =
            renderTable([
              ['隐含概率', formatPct(pH), formatPct(pD), formatPct(pA)],
              ['目标归一后概率', formatPct(nh), formatPct(nd), formatPct(na)],
              ['公平/目标赔率', fairH.toFixed(2), fairD.toFixed(2), fairA.toFixed(2)],
            ], `当前总和：${over.toFixed(3)}；目标总和：${target.toFixed(3)}`);
        }
      } else {
        const A2 = num(q('[name="A2"]'));
        const B2 = num(q('[name="B2"]'));
        const pA = 1/A2, pB = 1/B2, over = pA+pB, f = target/over;
        const na = pA*f, nb = pB*f, fairA = 1/na, fairB = 1/nb;
        if (out) {
          out.innerHTML =
            renderTable([
              ['隐含概率', formatPct(pA), formatPct(pB), ''],
              ['目标归一后概率', formatPct(na), formatPct(nb), ''],
              ['公平/目标赔率', fairA.toFixed(2), fairB.toFixed(2), ''],
            ], `当前总和：${over.toFixed(3)}；目标总和：${target.toFixed(3)}`);
        }
      }
    };

    if (form) {
      form.querySelectorAll('input[type="number"], input[type="text"]').forEach((el) => {
        el.addEventListener('input', () => {
          touched.add(el.name);
          if (validate(false)) calc();
        });
        el.addEventListener('blur', () => {
          touched.add(el.name);
          validate(false);
        });
      });
      q('[name="kind"]').addEventListener('change', () => {
        syncMode();
        validate(true);
        if (!(calcBtn instanceof HTMLButtonElement) || !calcBtn.disabled) calc();
      });
      form.addEventListener('reset', () => {
        setTimeout(() => {
          touched.clear();
          validate(false);
          if (out) out.textContent = '';
        }, 0);
      });
    }

    if (calcBtn instanceof HTMLButtonElement) {
      calcBtn.disabled = true;
      calcBtn.addEventListener('click', () => {
        if (!validate(true)) return;
        emit('calc_submit');
        calc();
      });
    }

    if (fillBtn) {
      fillBtn.addEventListener('click', () => {
        const setValue = (name, value) => {
          const el = q(`[name="${name}"]`);
          if (el instanceof HTMLInputElement || el instanceof HTMLSelectElement) {
            el.value = value;
            touched.add(name);
            el.dispatchEvent(new Event('input', { bubbles: true }));
          }
        };
        setValue('kind', '3way');
        setValue('target', '1.00');
        setValue('H', '2.30');
        setValue('D', '3.30');
        setValue('A', '3.10');
        emit('example_fill_click');
        syncMode();
        validate(true);
        if (calcBtn instanceof HTMLButtonElement && !calcBtn.disabled) calcBtn.click();
      });
    }

    shareBtn?.addEventListener('click', async () => {
      if (!validate(true)) return;
      const data = Object.fromEntries(new FormData(form));
      const url = makeShareUrl(window.location.pathname, data);
      try { await navigator.clipboard.writeText(url); alert('Share link copied!'); }
      catch { window.prompt('Copy your share URL:', url); }
    });

    const state = readParams({ kind:'3way', H:'', D:'', A:'', A2:'', B2:'', target:'' });
    Object.entries(state).forEach(([k,v])=>{
      const el = q(`[name="${k}"]`);
      if (el) {
        el.value = String(v);
        if (v) touched.add(k);
      }
    });
    syncMode();
    validate(false);
    emit('tool_view');
    if (!(calcBtn instanceof HTMLButtonElement) || !calcBtn.disabled) calc();
  </script>

  <HistoryPicker />
</BaseLayout>
