---
import AppLayout from '../../layouts/AppLayout.astro';
const title = 'Match Insights · Footy Analytics';
const jsonLd = { "@context":"https://schema.org","@type":"SoftwareApplication","name":"Match Insights","applicationCategory":"SportsApplication","operatingSystem":"Web","url":Astro.request.url };
import MI_URL from '../../client/match-insights.client.js?url';
---
<AppLayout title={title} description="Poisson → Fair odds → Kelly（闭环）" jsonLd={jsonLd} active="insights">
  <style>
    section, .card{border:1px solid #eee;border-radius:12px;padding:1rem}
    .mono{font-variant-numeric:tabular-nums;white-space:pre-wrap}
    .field-error{display:block;color:#d32f2f;font-size:.75rem;margin-top:4px;}
    .page-actions{display:flex;gap:8px;margin:12px 0;}
    .btn[disabled]{opacity:.6;cursor:not-allowed;}
    label{display:block;margin:.5rem 0 .25rem} input{width:100%;padding:.5rem .6rem;border:1px solid #ddd;border-radius:.5rem}
    .grid{display:grid;grid-template-columns:1fr 1fr;gap:1rem}
    button{padding:.6rem .9rem;border-radius:.6rem;border:1px solid #ddd;background:#fafafa;cursor:pointer}
    h2{margin-top:1.2rem}
  </style>

  <h1>Match Insights</h1>
  <div class="page-actions">
    <button type="button" class="btn" id="btn-fill-example" data-testid="fill-example">填充示例</button>
  </div>
  <form id="f" class="card grid">
    <div>
      <label>λ(Home)<input id="lh" inputmode="decimal" value="1.45"/><small class="field-error" data-error-for="lh"></small></label>
      <label>λ(Away)<input id="la" inputmode="decimal" value="1.20"/><small class="field-error" data-error-for="la"></small></label>
      <label>Max goals K（0..K）<input id="K" inputmode="numeric" value="8"/><small class="field-error" data-error-for="K"></small></label>
      <label>Bankroll<input id="bank" inputmode="decimal" value="1000"/><small class="field-error" data-error-for="bank"></small></label>
      <label>单注上限（比例，默认10%）<input id="cap" inputmode="decimal" value="0.10"/><small class="field-error" data-error-for="cap"></small></label>
    </div>
    <div>
      <label>Market odds - Home<input id="oh" value="2.10"/><small class="field-error" data-error-for="oh"></small></label>
      <label>Market odds - Draw<input id="od" value="3.40"/><small class="field-error" data-error-for="od"></small></label>
      <label>Market odds - Away<input id="oa" value="3.60"/><small class="field-error" data-error-for="oa"></small></label>
      <div style="margin-top:1rem;display:flex;gap:.6rem;flex-wrap:wrap">
        <button type="button" id="calc">Calculate</button>
        <button type="button" id="copy">复制摘要</button>
        <button type="button" id="csv">导出 Top5 CSV</button>
      </div>
    </div>
  </form>

  <section class="card"><h2>Model 1X2（Poisson ⟶ 归一）</h2>
    <div class="mono" id="modelLine"></div><div class="mono" id="fairLine"></div><div class="mono" id="tops"></div>
  </section>

  <section class="card"><h2>Market vs Model（含 Kelly）</h2>
    <div class="mono" id="marketLine"></div><div class="mono" id="kellyLine"></div>
    <small style="color:#666">当无优势时 Kelly=0；用单注上限控制 Half/Quarter Kelly。</small>
  </section>

  <script type="module" src={MI_URL}></script>
</AppLayout>

<!-- lyra:tooling --><script src="/tooling.js" defer></script>
<script type="module">
  import { required, isNumber, inRange, compose } from '../../lib/validate.ts';

  const form = document.getElementById('f');
  const calcBtn = document.getElementById('calc');
  const fillBtn = document.getElementById('btn-fill-example');
  const emit = (event, detail = {}) => {
    window.dispatchEvent(new CustomEvent('analytics', { detail: { event, tool: 'match-insights', ...detail } }));
  };

  const fields = [
    { name: 'lh', el: document.getElementById('lh'), validator: compose(required('请输入 λ(Home)'), isNumber(), inRange(0, 6, '推荐范围 0~6')) },
    { name: 'la', el: document.getElementById('la'), validator: compose(required('请输入 λ(Away)'), isNumber(), inRange(0, 6, '推荐范围 0~6')) },
    { name: 'K', el: document.getElementById('K'), validator: compose(required('请输入 K'), isNumber(), inRange(0, 15, '范围 0~15')) },
    { name: 'bank', el: document.getElementById('bank'), validator: compose(required('请输入 Bankroll'), isNumber(), inRange(1, 1000000, '范围 1~1000000')) },
    { name: 'cap', el: document.getElementById('cap'), validator: compose(required('请输入 单注上限'), isNumber(), inRange(0.01, 1, '范围 0.01~1')) },
    { name: 'oh', el: document.getElementById('oh'), validator: compose(required('请输入 主胜赔率'), isNumber(), inRange(1.01, 50, '范围 1.01~50')) },
    { name: 'od', el: document.getElementById('od'), validator: compose(required('请输入 平赔率'), isNumber(), inRange(1.01, 50, '范围 1.01~50')) },
    { name: 'oa', el: document.getElementById('oa'), validator: compose(required('请输入 客胜赔率'), isNumber(), inRange(1.01, 50, '范围 1.01~50')) },
  ];
  const touched = new Set();

  const errorEl = (name) => document.querySelector(`[data-error-for="${name}"]`);
  const getValue = (el) => (el?.value ?? '').trim();

  const validateField = (field, force = false) => {
    const value = getValue(field.el);
    if (force) touched.add(field.name);
    const result = field.validator(value);
    const el = errorEl(field.name);
    if (el) {
      el.textContent = !result.ok && (force || touched.has(field.name)) ? (result.msg ?? '') : '';
    }
    return result.ok;
  };

  const refresh = (force = false) => {
    const allOk = fields.every((field) => validateField(field, force));
    if (calcBtn instanceof HTMLButtonElement) calcBtn.disabled = !allOk;
    return allOk;
  };

  fields.forEach(({ name, el }) => {
    if (!el) return;
    ['input', 'blur'].forEach((evt) => {
      el.addEventListener(evt, () => {
        touched.add(name);
        refresh(false);
      });
    });
  });

  if (calcBtn instanceof HTMLButtonElement) {
    calcBtn.disabled = true;
    calcBtn.addEventListener('click', (event) => {
      if (!refresh(true)) {
        event.preventDefault();
        return;
      }
      emit('calc_submit');
    });
  }

  if (fillBtn) {
    fillBtn.addEventListener('click', () => {
      const setValue = (id, value) => {
        const el = document.getElementById(id);
        if (el instanceof HTMLInputElement) {
          el.value = value;
          touched.add(id);
          el.dispatchEvent(new Event('input', { bubbles: true }));
        }
      };
      setValue('lh', '1.45');
      setValue('la', '1.10');
      setValue('K', '8');
      setValue('bank', '1000');
      setValue('cap', '0.50');
      setValue('oh', '2.30');
      setValue('od', '3.30');
      setValue('oa', '3.10');
      emit('example_fill_click');
      if (calcBtn instanceof HTMLButtonElement) {
        refresh(true);
        if (!calcBtn.disabled) calcBtn.click();
      }
    });
  }

  emit('tool_view');
  refresh(false);
</script>
