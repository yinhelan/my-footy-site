---
import AppLayout from '../../layouts/AppLayout.astro';
const title = 'Match Insights · Footy Analytics';
const jsonLd = { "@context":"https://schema.org","@type":"SoftwareApplication","name":"Match Insights","applicationCategory":"SportsApplication","operatingSystem":"Web","url":Astro.request.url };
import MI_URL from '../../client/match-insights.client.js?url';
---
<AppLayout title={title} description="Poisson → Fair odds → Kelly（闭环）" jsonLd={jsonLd} active="insights">
  <style>
    section, .card{border:1px solid #eee;border-radius:12px;padding:1rem}
    .mono{font-variant-numeric:tabular-nums;white-space:pre-wrap}
    .field-error{display:block;color:#d32f2f;font-size:.75rem;margin-top:4px;}
    .page-actions{display:flex;gap:8px;margin:12px 0;}
    .btn[disabled]{opacity:.6;cursor:not-allowed;}
    label{display:block;margin:.5rem 0 .25rem} input{width:100%;padding:.5rem .6rem;border:1px solid #ddd;border-radius:.5rem}
    .grid{display:grid;grid-template-columns:1fr 1fr;gap:1rem}
    button{padding:.6rem .9rem;border-radius:.6rem;border:1px solid #ddd;background:#fafafa;cursor:pointer}
    h2{margin-top:1.2rem}
  </style>

  <h1>Match Insights</h1>
  <div class="page-actions">
    <button type="button" class="btn" id="btn-fill-example" data-testid="fill-example">填充示例</button>
  </div>
  <form id="f" class="card grid">
    <div>
      <label>λ(Home)<input id="lambdaHome" name="lh" inputmode="decimal" value="1.45"/><small class="field-error" data-error-for="lh"></small></label>
      <label>λ(Away)<input id="lambdaAway" name="la" inputmode="decimal" value="1.20"/><small class="field-error" data-error-for="la"></small></label>
      <label>Max goals K（0..K）<input id="K" inputmode="numeric" value="8"/><small class="field-error" data-error-for="K"></small></label>
      <label>Bankroll<input id="bank" inputmode="decimal" value="1000"/><small class="field-error" data-error-for="bank"></small></label>
      <label>单注上限（比例，默认10%）<input id="cap" inputmode="decimal" value="0.10"/><small class="field-error" data-error-for="cap"></small></label>
    </div>
    <div>
      <label>Market odds - Home<input id="oh" value="2.10"/><small class="field-error" data-error-for="oh"></small></label>
      <label>Market odds - Draw<input id="od" value="3.40"/><small class="field-error" data-error-for="od"></small></label>
      <label>Market odds - Away<input id="oa" value="3.60"/><small class="field-error" data-error-for="oa"></small></label>
      <div style="margin-top:1rem;display:flex;gap:.6rem;flex-wrap:wrap">
        <button type="button" id="btn-calc">Calculate</button>
        <button type="button" id="copy">复制摘要</button>
        <button type="button" id="csv">导出 Top5 CSV</button>
      </div>
      <input type="hidden" id="line" name="line" value="" />
    </div>
  </form>

  <div id="out">
    <section class="card"><h2>Model 1X2（Poisson ⟶ 归一）</h2>
      <div class="mono" id="modelLine"></div><div class="mono" id="fairLine"></div><div class="mono" id="tops"></div>
    </section>

    <section class="card"><h2>Market vs Model（含 Kelly）</h2>
      <div class="mono" id="marketLine"></div><div class="mono" id="kellyLine"></div>
      <small style="color:#666">当无优势时 Kelly=0；用单注上限控制 Half/Quarter Kelly。</small>
    </section>
  </div>

  <section id="mi-tool" style="margin:1rem 0; padding:1rem; border:1px solid #eee; border-radius:12px;">
    <div style="display:flex; gap:1rem; flex-wrap:wrap; align-items:flex-end;">
      <label>λ_home <input id="mi-lh" type="number" step="0.01" value="1.45" style="width:7rem"></label>
      <label>λ_away <input id="mi-la" type="number" step="0.01" value="1.10" style="width:7rem"></label>
      <label>maxGoals <input id="mi-max" type="number" step="1" value="10" style="width:6rem"></label>
      <label>OU line <input id="mi-ou" type="number" step="0.5" value="2.5" style="width:6rem"></label>
      <button id="mi-fill" data-testid="fill-example">填充示例</button>
      <button id="mi-calc">计算</button>
    </div>
    <div id="mi-actions" style="margin-top:.5rem; display:flex; gap:.5rem; flex-wrap:wrap;">
      <button id="mi-copy">复制摘要</button>
      <button id="mi-export-csv">导出 CSV</button>
      <button id="mi-export-png">导出 PNG</button>
    </div>
    <div id="mi-capture">
      <div id="mi-results" style="margin-top:1rem; display:grid; grid-template-columns: repeat(auto-fit,minmax(240px,1fr)); gap:12px;">
        <div id="mi-p1x2"  style="padding:12px; border:1px solid #eee; border-radius:10px;"></div>
        <div id="mi-ou-card" style="padding:12px; border:1px solid #eee; border-radius:10px;"></div>
        <div id="mi-btts"  style="padding:12px; border:1px solid #eee; border-radius:10px;"></div>
        <div id="mi-top"   style="padding:12px; border:1px solid #eee; border-radius:10px;"></div>
        <div id="mi-kelly" style="padding:12px; border:1px solid #eee; border-radius:10px; grid-column: 1 / -1;"></div>
      </div>
    </div>
  </section>

  <script type="module">
    import { computeInsights } from "/src/lib/math/poisson.ts";
    import { kelly } from "/src/lib/kelly.ts";
    const fmtP = (x)=> (100*x).toFixed(1)+"%"; const f6=(x)=>x.toFixed(6); const f2=(x)=>x.toFixed(2);
    function val(id){ const el=document.getElementById(id); return el && 'value' in el ? Number(el.value) : NaN; }
    let lastState = null;
    let html2canvasLoader = null;
    const getCaptureText = ()=>{ const capture=document.getElementById('mi-capture'); return capture ? capture.innerText.trim() : ''; };
    async function copyText(text){
      try{
        if(navigator?.clipboard?.writeText){
          await navigator.clipboard.writeText(text);
          return true;
        }
      }catch(err){
        console.warn('clipboard API failed, fallback to execCommand', err);
      }
      const ta=document.createElement('textarea');
      ta.value=text;
      ta.style.position='fixed';
      ta.style.top='0';
      ta.style.left='0';
      ta.style.opacity='0';
      document.body.appendChild(ta);
      ta.select();
      const ok=document.execCommand('copy');
      document.body.removeChild(ta);
      return ok;
    }
    function downloadCsv(filename, rows){
      const csv=rows.map((row)=>row.map((cell)=>`"${String(cell).replace(/"/g,'""')}"`).join(',')).join('\n');
      const blob=new Blob([csv],{type:'text/csv;charset=utf-8;'});
      const link=document.createElement('a');
      link.href=URL.createObjectURL(blob);
      link.download=filename;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(link.href);
    }
    const ensureHtml2canvas = async ()=>{
      if(!html2canvasLoader){
        html2canvasLoader = import('html2canvas').then((mod)=>mod.default||mod);
      }
      return html2canvasLoader;
    };
    function buildCsvRows(state){
      if(!state) return [];
      const { inputs, p1x2, fairPrice, overUnder, btts, topCorrectScores, kelly: kState } = state;
      const rows=[["section","metric","value"]];
      rows.push(['inputs','lambda_home', inputs.lh.toFixed(2)]);
      rows.push(['inputs','lambda_away', inputs.la.toFixed(2)]);
      rows.push(['inputs','max_goals', inputs.maxGoals]);
      rows.push(['inputs','ou_line', inputs.ou.toFixed(2)]);
      rows.push(['1x2','prob_H', p1x2.H.toFixed(6)]);
      rows.push(['1x2','prob_D', p1x2.D.toFixed(6)]);
      rows.push(['1x2','prob_A', p1x2.A.toFixed(6)]);
      rows.push(['1x2','fair_H', fairPrice.H.toFixed(2)]);
      rows.push(['1x2','fair_D', fairPrice.D.toFixed(2)]);
      rows.push(['1x2','fair_A', fairPrice.A.toFixed(2)]);
      rows.push(['over_under','prob_over', overUnder.over.toFixed(6)]);
      rows.push(['over_under','prob_under', overUnder.under.toFixed(6)]);
      rows.push(['btts','prob_yes', btts.yes.toFixed(6)]);
      rows.push(['btts','prob_no', btts.no.toFixed(6)]);
      topCorrectScores.forEach((item)=>{ rows.push(['top_score', item.score, item.prob.toFixed(6)]); });
      rows.push(['kelly','market', kState.market]);
      rows.push(['kelly','market_label', kState.marketLabel]);
      rows.push(['kelly','odds', kState.odds.toFixed(2)]);
      rows.push(['kelly','prob', kState.prob.toFixed(6)]);
      rows.push(['kelly','fraction', kState.fraction.toFixed(2)]);
      rows.push(['kelly','bankroll', kState.bankroll.toFixed(2)]);
      rows.push(['kelly','stake_full', kState.stake.toFixed(2)]);
      rows.push(['kelly','stake_half', kState.half.toFixed(2)]);
      rows.push(['kelly','stake_quarter', kState.quarter.toFixed(2)]);
      rows.push(['kelly','kelly_percent', (kState.percent*100).toFixed(2)+'%']);
      rows.push(['kelly','fair_odds', Number.isFinite(kState.fairOdds)?kState.fairOdds.toFixed(2):'∞']);
      return rows;
    }
    function marketDisplay(market, ou){
      const hasLine = Number.isFinite(ou);
      const lineLabel = hasLine ? Number(ou).toString() : '';
      switch(market){
        case 'H': return 'H';
        case 'D': return 'D';
        case 'A': return 'A';
        case 'Over': return hasLine ? `Over ${lineLabel}` : 'Over';
        case 'Under': return hasLine ? `Under ${lineLabel}` : 'Under';
        case 'Yes': return 'BTTS Yes';
        case 'No': return 'BTTS No';
        default: return 'H';
      }
    }
    async function exportPng(capture){
      if(!capture) return;
      const html2canvas = await ensureHtml2canvas();
      const canvas = await html2canvas(capture, { backgroundColor: '#ffffff', scale: window.devicePixelRatio || 2 });
      const blob = await new Promise((resolve, reject)=>canvas.toBlob((b)=>b?resolve(b):reject(new Error('Failed to export canvas'))));
      const url = URL.createObjectURL(blob);
      const link=document.createElement('a');
      const stamp=new Date().toISOString().replace(/[:.]/g,'-');
      link.href=url;
      link.download=`match-insights-${stamp}.png`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);
    }
    function render(){
      const lh = val('mi-lh')||0, la = val('mi-la')||0, mg = Math.max(1, val('mi-max')||10), ou = val('mi-ou')||2.5;
      const R = computeInsights(lh, la, mg, ou);

      // 1X2 概率/公平价
      const p = R.p1x2, px = R.fairPrice;
      document.getElementById('mi-p1x2').innerHTML =
        `<h3 style="margin:0 0 .5rem 0;">1X2 概率 / 公平价</h3>
         <div>H: ${fmtP(p.H)}（￥${f2(px.H)}）</div>
         <div>D: ${fmtP(p.D)}（￥${f2(px.D)}）</div>
         <div>A: ${fmtP(p.A)}（￥${f2(px.A)}）</div>`;

      // O/U
      const oux = R.overUnder;
      const underProb = Math.max(0, Math.min(1, 1-oux.over));
      document.getElementById('mi-ou-card').innerHTML =
        `<h3 style="margin:0 0 .5rem 0;">O/U @ ${ou}</h3>
         <div>Over: ${fmtP(oux.over)} / Under: ${fmtP(underProb)}</div>`;

      // BTTS
      const b = R.btts;
      document.getElementById('mi-btts').innerHTML =
        `<h3 style="margin:0 0 .5rem 0;">BTTS</h3>
         <div>Yes: ${fmtP(b.yes)} / No: ${fmtP(b.no)}</div>`;

      // Top-5 正确比分
      const rows = R.topCorrectScores.map((r)=>`<tr><td>${r.score}</td><td>${f6(r.prob)}</td></tr>`).join('');
      document.getElementById('mi-top').innerHTML =
        `<h3 style="margin:0 0 .5rem 0;">Top-5 正确比分</h3>
         <table><thead><tr><th>比分</th><th>概率</th></tr></thead><tbody>${rows}</tbody></table>`;

      // Kelly（默认盘口 2.30，可切换分数Kelly）
      const marketSelEl = document.getElementById('mi-kelly-market');
      const marketSel = marketSelEl && 'value' in marketSelEl ? marketSelEl.value : 'H';
      const decOddsEl = document.getElementById('mi-kelly-odds');
      const bankrollEl = document.getElementById('mi-bankroll');
      const fracEl = document.getElementById('mi-fraction');
      const decOdds = decOddsEl && 'value' in decOddsEl ? Number(decOddsEl.value) : 2.30;
      const bankroll = bankrollEl && 'value' in bankrollEl ? Number(bankrollEl.value) : 1000;
      const frac = fracEl && 'value' in fracEl ? Number(fracEl.value) : 1;

      const marketProbabilities = {
        H: p.H,
        D: p.D,
        A: p.A,
        Over: oux.over,
        Under: underProb,
        Yes: b.yes,
        No: b.no,
      };
      const fp = marketProbabilities[marketSel] ?? p.H;
      const K = kelly(decOdds, fp, bankroll, frac);
      const kFull = bankroll * K.fStar;
      const halfStake = kFull * 0.5;
      const quarterStake = kFull * 0.25;
      const k100 = (100*K.fStar).toFixed(1) + '%';
      const fairOddsValue = fp > 0 ? 1 / fp : Infinity;
      const fairOddsText = Number.isFinite(fairOddsValue) ? `￥${f2(fairOddsValue)}` : '∞';
      const marketLabel = marketDisplay(marketSel, ou);
      const lineText = `市场 ${marketLabel} · 模型概率 ${fmtP(fp)} · 公平特价 ${fairOddsText} · Kelly 比例 ${k100} · 全额 ￥${kFull.toFixed(2)} · Half ￥${halfStake.toFixed(2)} · Quarter ￥${quarterStake.toFixed(2)}`;

      document.getElementById('mi-kelly').innerHTML =
        `<h3 style="margin:0 0 .5rem 0;">Kelly</h3>
         <div style="display:flex; gap:1rem; flex-wrap:wrap; align-items:flex-end;">
           <label>市场
             <select id="mi-kelly-market">
               <option value="H" ${marketSel==='H'?'selected':''}>H</option>
               <option value="D" ${marketSel==='D'?'selected':''}>D</option>
               <option value="A" ${marketSel==='A'?'selected':''}>A</option>
               <option value="Over" ${marketSel==='Over'?'selected':''}>Over</option>
               <option value="Under" ${marketSel==='Under'?'selected':''}>Under</option>
               <option value="Yes" ${marketSel==='Yes'?'selected':''}>Yes</option>
               <option value="No" ${marketSel==='No'?'selected':''}>No</option>
             </select>
           </label>
           <label>盘口赔率(十进制) <input id="mi-kelly-odds" type="number" step="0.01" value="${decOdds}" style="width:7rem"></label>
           <label>分数Kelly
             <select id="mi-fraction">
               <option value="1" ${frac===1?'selected':''}>1</option>
               <option value="0.5" ${frac===0.5?'selected':''}>1/2</option>
               <option value="0.25" ${frac===0.25?'selected':''}>1/4</option>
             </select>
           </label>
           <label>资金 <input id="mi-bankroll" type="number" step="10" value="${bankroll}" style="width:7rem"></label>
           <button id="mi-kelly-recalc">重算</button>
         </div>
         <div id="kellyLine" style="margin-top:.5rem;">${lineText}</div>`;
      const legacyLine = document.querySelector('#out #kellyLine');
      if (legacyLine) legacyLine.textContent = lineText;

      lastState = {
        inputs: { lh, la, maxGoals: mg, ou },
        p1x2: p,
        fairPrice: px,
        overUnder: { over: oux.over, under: underProb },
        btts: b,
        topCorrectScores: R.topCorrectScores,
        kelly: {
          market: marketSel,
          marketLabel,
          odds: decOdds,
          bankroll,
          fraction: frac,
          prob: fp,
          stake: kFull,
          half: halfStake,
          quarter: quarterStake,
          percent: K.fStar,
          fairOdds: fairOddsValue,
        },
      };

      // e2e 钩子
      window.__mi_render__ = render;
    }
    function wire(){
      const fill = document.getElementById('mi-fill');
      fill?.addEventListener('click', ()=>{
        const set=(id,v)=>{const el=document.getElementById(id); if(el&&'value'in el) el.value=String(v);};
        set('mi-lh',1.45); set('mi-la',1.10); set('mi-max',10); set('mi-ou',2.5); render();
      });
      document.getElementById('mi-calc')?.addEventListener('click', (e)=>{ e.preventDefault(); render(); });
      document.getElementById('mi-copy')?.addEventListener('click', async (event)=>{
        event.preventDefault();
        const summary=getCaptureText();
        if(!summary) return;
        const ok=await copyText(summary);
        alert(ok?'已复制工具摘要':'复制失败，请手动复制');
      });
      document.getElementById('mi-export-csv')?.addEventListener('click', (event)=>{
        event.preventDefault();
        if(!lastState) return;
        const rows=buildCsvRows(lastState);
        if(rows.length>1) downloadCsv('match-insights.csv', rows);
      });
      document.getElementById('mi-export-png')?.addEventListener('click', async (event)=>{
        event.preventDefault();
        const capture=document.getElementById('mi-capture');
        if(!capture) return;
        try{
          await exportPng(capture);
        }catch(err){
          console.error('mi-export-png failed', err);
          alert('导出 PNG 失败，请重试');
        }
      });
      document.addEventListener('change', (ev)=>{ const id=(ev.target&&ev.target.id)||''; if(['mi-ou','mi-lh','mi-la','mi-max','mi-kelly-market','mi-kelly-odds','mi-fraction','mi-bankroll'].includes(id)) render(); });
      document.addEventListener('click', (ev)=>{ const id=(ev.target&&ev.target.id)||''; if(id==='mi-kelly-recalc') render(); });
      render();
    }
    wire();
  </script>

  <script type="module" src={MI_URL}></script>
</AppLayout>

<!-- lyra:tooling --><script src="/tooling.js" defer></script>
<script type="module">
  import { required, isNumber, inRange, compose } from '/src/lib/validate.ts';
  import { decodeState, syncToUrl } from '/src/lib/shareableState.ts';

  const form = document.getElementById('f');
  const fillBtn = document.getElementById('btn-fill-example');
  const aliasMap = {
    lh: ['lh', 'lambdaHome'],
    la: ['la', 'lambdaAway'],
    line: ['line', 'ouLine'],
    K: ['K'],
    bank: ['bank'],
    cap: ['cap'],
    oh: ['oh'],
    od: ['od'],
    oa: ['oa'],
    'btn-calc': ['btn-calc', 'calc'],
  };

  const getField = (id) => {
    const candidates = aliasMap[id] || [id];
    for (const candidate of candidates) {
      const el = document.getElementById(candidate);
      if (el) return el;
    }
    return null;
  };

  const calcBtn = getField('btn-calc');
  const copyBtn = document.getElementById('copy');
  const csvBtn = document.getElementById('csv');
  const lineInput = getField('line');

  const emit = (event, detail = {}) => {
    window.dispatchEvent(new CustomEvent('analytics', { detail: { event, tool: 'match-insights', ...detail } }));
  };

  const fields = [
    { name: 'lh', el: getField('lh'), validator: compose(required('请输入 λ(Home)'), isNumber(), inRange(0, 6, '推荐范围 0~6')) },
    { name: 'la', el: getField('la'), validator: compose(required('请输入 λ(Away)'), isNumber(), inRange(0, 6, '推荐范围 0~6')) },
    { name: 'K', el: getField('K'), validator: compose(required('请输入 K'), isNumber(), inRange(0, 15, '范围 0~15')) },
    { name: 'bank', el: getField('bank'), validator: compose(required('请输入 Bankroll'), isNumber(), inRange(1, 1000000, '范围 1~1000000')) },
    { name: 'cap', el: getField('cap'), validator: compose(required('请输入 单注上限'), isNumber(), inRange(0.01, 1, '范围 0.01~1')) },
    { name: 'oh', el: getField('oh'), validator: compose(required('请输入 主胜赔率'), isNumber(), inRange(1.01, 50, '范围 1.01~50')) },
    { name: 'od', el: getField('od'), validator: compose(required('请输入 平赔率'), isNumber(), inRange(1.01, 50, '范围 1.01~50')) },
    { name: 'oa', el: getField('oa'), validator: compose(required('请输入 客胜赔率'), isNumber(), inRange(1.01, 50, '范围 1.01~50')) },
  ];
  const touched = new Set();

  const errorEl = (name) => document.querySelector(`[data-error-for="${name}"]`);
  const getValue = (el) => (el?.value ?? '').trim();

  const stateForUrl = () => {
    const lh = getValue(getField('lh'));
    const la = getValue(getField('la'));
    const line = lineInput instanceof HTMLInputElement ? lineInput.value.trim() : '';
    return {
      lh: lh || undefined,
      la: la || undefined,
      line: line || undefined,
    };
  };

  let syncTimer = 0;
  const scheduleSync = () => {
    if (typeof location === 'undefined') return;
    clearTimeout(syncTimer);
    syncTimer = window.setTimeout(() => {
      syncToUrl(stateForUrl());
    }, 120);
  };

  const validateField = (field, force = false) => {
    const value = getValue(field.el);
    if (force) touched.add(field.name);
    const result = field.validator(value);
    const el = errorEl(field.name);
    if (el) {
      el.textContent = !result.ok && (force || touched.has(field.name)) ? (result.msg ?? '') : '';
    }
    return result.ok;
  };

  const refresh = (force = false) => {
    const allOk = fields.every((field) => validateField(field, force));
    if (calcBtn instanceof HTMLButtonElement) calcBtn.disabled = !allOk;
    return allOk;
  };

  const assignValue = (name, value, { markTouched = false, trigger = true } = {}) => {
    const el = getField(name);
    if (!(el instanceof HTMLInputElement)) return;
    const val = value ?? '';
    el.value = val;
    el.setAttribute('value', val);
    if (markTouched) touched.add(name);
    if (trigger) el.dispatchEvent(new Event('input', { bubbles: true }));
  };

  fields.forEach(({ name, el }) => {
    if (!(el instanceof HTMLInputElement)) return;
    ['input', 'blur'].forEach((evt) => {
      el.addEventListener(evt, () => {
        touched.add(name);
        refresh(false);
        scheduleSync();
      });
    });
  });

  if (lineInput instanceof HTMLInputElement) {
    lineInput.addEventListener('input', scheduleSync);
  }

  if (calcBtn instanceof HTMLButtonElement) {
    calcBtn.disabled = true;
    calcBtn.addEventListener('click', (event) => {
      if (!refresh(true)) {
        event.preventDefault();
        return;
      }
      emit('calc_submit');
      scheduleSync();
    });
  }

  if (fillBtn) {
    fillBtn.addEventListener('click', () => {
      assignValue('lh', '1.45', { markTouched: true });
      assignValue('la', '1.10', { markTouched: true });
      assignValue('K', '8', { markTouched: true });
      assignValue('bank', '1000', { markTouched: true });
      assignValue('cap', '0.50', { markTouched: true });
      assignValue('oh', '2.30', { markTouched: true });
      assignValue('od', '3.30', { markTouched: true });
      assignValue('oa', '3.10', { markTouched: true });
      assignValue('line', '2.5', { trigger: false });
      emit('example_fill_click');
      const ok = refresh(true);
      if (calcBtn instanceof HTMLButtonElement) {
        calcBtn.disabled = !ok;
        if (ok) calcBtn.click();
      }
      scheduleSync();
    });
  }

  const defaults = { lh: '1.45', la: '1.20', line: '' };
  if (typeof location !== 'undefined') {
    const initial = decodeState(location.search, defaults);
    assignValue('lh', String(initial.lh ?? defaults.lh), { trigger: false });
    assignValue('la', String(initial.la ?? defaults.la), { trigger: false });
    assignValue('line', String(initial.line ?? defaults.line ?? ''), { trigger: false });
  }

  refresh(false);
  scheduleSync();
  emit('tool_view');
</script>
